{"ast":null,"code":"var _jsxFileName = \"/home/apoorv.bhatnagar/Downloads/cine-trail/src/components/genres/genres.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchGenres } from '../../api/movieAPI';\nimport { toast } from 'react-toastify';\nimport GenresItem from './genresItem/genresItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Genres = _ref => {\n  _s();\n  let {\n    handleGenre,\n    genre\n  } = _ref;\n  const [data, setData] = useState([{\n    id: 0,\n    name: 'All'\n  }]);\n  const [stateData, setStateData] = useState('pending');\n  useEffect(() => {\n    (async () => {\n      try {\n        setStateData('pending');\n        const fetchData = await fetchGenres();\n        if (Array.isArray(fetchData)) {\n          setStateData('fulfilled');\n          setData(prevState => [...prevState, ...fetchData]);\n        } else {\n          throw new Error(\"fetchGeneres didnt in the genere array\");\n        }\n      } catch {\n        setStateData('rejected');\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    if (stateData === 'rejected') toast.error('Unfortunately we were unable to get the list of genres.', {\n      theme: 'colored'\n    });\n  }, [stateData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"genres\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"genres__body\",\n      children: data.map(item => /*#__PURE__*/_jsxDEV(GenresItem, {\n        genre: genre,\n        handleGenre: handleGenre,\n        id: item.id,\n        name: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Genres, \"fuDv6I94TuLyS8WbAwBklc/iopc=\");\n_c = Genres;\nexport default Genres;\nvar _c;\n$RefreshReg$(_c, \"Genres\");","map":{"version":3,"names":["React","useState","useEffect","fetchGenres","toast","GenresItem","jsxDEV","_jsxDEV","Genres","_ref","_s","handleGenre","genre","data","setData","id","name","stateData","setStateData","fetchData","Array","isArray","prevState","Error","error","theme","className","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/apoorv.bhatnagar/Downloads/cine-trail/src/components/genres/genres.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { fetchGenres } from '../../api/movieAPI';\nimport { IGenres } from '../../interfaces/genres.interface';\nimport { toast } from 'react-toastify';\n\nimport GenresItem from './genresItem/genresItem';\n\ninterface IProps {\n  handleGenre: (toggleGenre: IGenres) => void;\n  genre: IGenres;\n}\n\nconst Genres: React.FC<IProps> = ({ handleGenre, genre }) => {\n  const [data, setData] = useState<IGenres[]>([{ id: 0, name: 'All' }]);\n  const [stateData, setStateData] = useState('pending');\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setStateData('pending');\n\n        const fetchData = await fetchGenres();\n        if(Array.isArray(fetchData))\n        {\n          setStateData('fulfilled');\n          setData(prevState => [...prevState, ...fetchData]);\n        }\n        else\n        {\n          throw new Error(\"fetchGeneres didnt in the genere array\");\n        }\n        \n      } catch {\n        setStateData('rejected');\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (stateData === 'rejected')\n      toast.error('Unfortunately we were unable to get the list of genres.', {\n        theme: 'colored',\n      });\n  }, [stateData]);\n\n  return (\n    <div className=\"genres\">\n      <div className=\"genres__body\">\n        {data.map(item => (\n          <GenresItem\n            genre={genre}\n            handleGenre={handleGenre}\n            id={item.id}\n            name={item.name}\n            key={item.id}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Genres;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOjD,MAAMC,MAAwB,GAAGC,IAAA,IAA4B;EAAAC,EAAA;EAAA,IAA3B;IAAEC,WAAW;IAAEC;EAAM,CAAC,GAAAH,IAAA;EACtD,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAY,CAAC;IAAEc,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAM,CAAC,CAAC,CAAC;EACrE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,SAAS,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,IAAI;QACFgB,YAAY,CAAC,SAAS,CAAC;QAEvB,MAAMC,SAAS,GAAG,MAAMhB,WAAW,CAAC,CAAC;QACrC,IAAGiB,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,EAC3B;UACED,YAAY,CAAC,WAAW,CAAC;UACzBJ,OAAO,CAACQ,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE,GAAGH,SAAS,CAAC,CAAC;QACpD,CAAC,MAED;UACE,MAAM,IAAII,KAAK,CAAC,wCAAwC,CAAC;QAC3D;MAEF,CAAC,CAAC,MAAM;QACNL,YAAY,CAAC,UAAU,CAAC;MAC1B;IACF,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACd,IAAIe,SAAS,KAAK,UAAU,EAC1Bb,KAAK,CAACoB,KAAK,CAAC,yDAAyD,EAAE;MACrEC,KAAK,EAAE;IACT,CAAC,CAAC;EACN,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EAEf,oBACEV,OAAA;IAAKmB,SAAS,EAAC,QAAQ;IAAAC,QAAA,eACrBpB,OAAA;MAAKmB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1Bd,IAAI,CAACe,GAAG,CAACC,IAAI,iBACZtB,OAAA,CAACF,UAAU;QACTO,KAAK,EAAEA,KAAM;QACbD,WAAW,EAAEA,WAAY;QACzBI,EAAE,EAAEc,IAAI,CAACd,EAAG;QACZC,IAAI,EAAEa,IAAI,CAACb;MAAK,GACXa,IAAI,CAACd,EAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvB,EAAA,CAhDIF,MAAwB;AAAA0B,EAAA,GAAxB1B,MAAwB;AAkD9B,eAAeA,MAAM;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}